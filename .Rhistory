qqnorm (ranef(glmm_algae_phylum_block_alpha_pielou)$header_tanks_block[[1]])
coef(summary(glmm_algae_phylum_block_alpha_pielou))
print(summary(glmm_algae_phylum_block_alpha_pielou), correlation=TRUE)
parameters::p_value(glmm_algae_phylum_block_alpha_pielou)
eta_squared(glmm_algae_phylum_block_alpha_pielou)
## For Observed
### To check the normality of the data
hist(alpha_lm_algae_order$Observed)
qqnorm(alpha_lm_algae_order$Observed)
qqline(alpha_lm_algae_order$Observed)
shapiro.test(alpha_lm_algae_order$Observed)
### Mixed model
lmm_algae_order_block_alpha_Observed <- lmer(Observed ~ nutrient*sediment*flow*time + (1|header_tanks_block), data = alpha_lm_algae_order)
#### Test for Heteroscedasticity
plot(lmm_algae_order_block_alpha_Observed)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(lmm_algae_order_block_alpha_Observed)~as.factor(alpha_lm_algae_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(lmm_algae_order_block_alpha_Observed, Observed~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_algae_order$Observed~fitted(lmm_algae_order_block_alpha_Observed))
### Normality of Residuals
qqnorm(resid(lmm_algae_order_block_alpha_Observed))
qqline(resid(lmm_algae_order_block_alpha_Observed))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(lmm_algae_order_block_alpha_Observed)
# Distribution of the random effects
qqnorm (ranef(lmm_algae_order_block_alpha_Observed)$header_tanks_block[[1]])
coef(summary(lmm_algae_order_block_alpha_Observed))
print(summary(lmm_algae_order_block_alpha_Observed), correlation=TRUE)
eta_squared(lmm_algae_order_block_alpha_Observed)
## For Shannon
### To check the normality of the data
hist(alpha_lm_algae_order$Shannon)
qqnorm(alpha_lm_algae_order$Shannon)
qqline(alpha_lm_algae_order$Shannon)
shapiro.test(alpha_lm_algae_order$Shannon)
### Mixed model
glmm_algae_order_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_order)
#### Test for Heteroscedasticity
plot(glmm_algae_order_block_alpha_Shannon)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_algae_order_block_alpha_Shannon)~as.factor(alpha_lm_algae_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_algae_order_block_alpha_Shannon, Shannon~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_algae_order$Shannon~fitted(glmm_algae_order_block_alpha_Shannon))
### Normality of Residuals
qqnorm(resid(glmm_algae_order_block_alpha_Shannon))
qqline(resid(glmm_algae_order_block_alpha_Shannon))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_algae_order_block_alpha_Shannon)
# Distribution of the random effects
qqnorm (ranef(glmm_algae_order_block_alpha_Shannon)$header_tanks_block[[1]])
coef(summary(glmm_algae_order_block_alpha_Shannon))
print(summary(glmm_algae_order_block_alpha_Shannon), correlation=TRUE)
parameters::p_value(glmm_algae_order_block_alpha_Shannon)
eta_squared(glmm_algae_order_block_alpha_Shannon)
## For Pielou
### To check the normality of the data
hist(alpha_lm_algae_order$pielou)
qqnorm(alpha_lm_algae_order$pielou)
qqline(alpha_lm_algae_order$pielou)
shapiro.test(alpha_lm_algae_order$pielou)
### Mixed model
glmm_algae_order_block_alpha_pielou <- glmer(pielou ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_order)
#### Test for Heteroscedasticity
plot(glmm_algae_order_block_alpha_pielou)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_algae_order_block_alpha_pielou)~as.factor(alpha_lm_algae_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_algae_order_block_alpha_pielou, pielou~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_algae_order$pielou~fitted(glmm_algae_order_block_alpha_pielou))
### Normality of Residuals
qqnorm(resid(glmm_algae_order_block_alpha_pielou))
qqline(resid(glmm_algae_order_block_alpha_pielou))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_algae_order_block_alpha_pielou)
# Distribution of the random effects
qqnorm (ranef(glmm_algae_order_block_alpha_pielou)$header_tanks_block[[1]])
coef(summary(glmm_algae_order_block_alpha_pielou))
print(summary(glmm_algae_order_block_alpha_pielou), correlation=TRUE)
parameters::p_value(glmm_algae_order_block_alpha_pielou)
eta_squared(glmm_algae_order_block_alpha_pielou)
## For Observed
### To check the normality of the data
hist(alpha_lm_protist_phylum$Observed)
qqnorm(alpha_lm_protist_phylum$Observed)
qqline(alpha_lm_protist_phylum$Observed)
shapiro.test(alpha_lm_protist_phylum$Observed)
### Mixed model
glmm_protist_phylum_block_alpha_Observed <- glmer(Observed ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_phylum)
#### Test for Heteroscedasticity
plot(glmm_protist_phylum_block_alpha_Observed)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_phylum_block_alpha_Observed)~as.factor(alpha_lm_protist_phylum$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_phylum_block_alpha_Observed, Observed~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_phylum$Observed~fitted(glmm_protist_phylum_block_alpha_Observed))
### Normality of Residuals
qqnorm(resid(glmm_protist_phylum_block_alpha_Observed))
qqline(resid(glmm_protist_phylum_block_alpha_Observed))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_phylum_block_alpha_Observed)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_phylum_block_alpha_Observed)$header_tanks_block[[1]])
coef(summary(glmm_protist_phylum_block_alpha_Observed))
print(summary(glmm_protist_phylum_block_alpha_Observed), correlation=TRUE)
parameters::p_value(glmm_protist_phylum_block_alpha_Observed)
eta_squared(glmm_protist_phylum_block_alpha_Observed)
## For Shannon
### To check the normality of the data
hist(alpha_lm_protist_phylum$Shannon)
qqnorm(alpha_lm_protist_phylum$Shannon)
qqline(alpha_lm_protist_phylum$Shannon)
shapiro.test(alpha_lm_protist_phylum$Shannon)
### Mixed model
glmm_protist_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_phylum)
#### Test for Heteroscedasticity
plot(glmm_protist_phylum_block_alpha_Shannon)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_phylum_block_alpha_Shannon)~as.factor(alpha_lm_protist_phylum$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_phylum_block_alpha_Shannon, Shannon~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_phylum$Shannon~fitted(glmm_protist_phylum_block_alpha_Shannon))
### Normality of Residuals
qqnorm(resid(glmm_protist_phylum_block_alpha_Shannon))
qqline(resid(glmm_protist_phylum_block_alpha_Shannon))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_phylum_block_alpha_Shannon)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_phylum_block_alpha_Shannon)$header_tanks_block[[1]])
coef(summary(glmm_protist_phylum_block_alpha_Shannon))
print(summary(glmm_protist_phylum_block_alpha_Shannon), correlation=TRUE)
parameters::p_value(glmm_protist_phylum_block_alpha_Shannon)
eta_squared(glmm_protist_phylum_block_alpha_Shannon)
## For Pielou
### To check the normality of the data
hist(alpha_lm_protist_phylum$pielou)
qqnorm(alpha_lm_protist_phylum$pielou)
qqline(alpha_lm_protist_phylum$pielou)
shapiro.test(alpha_lm_protist_phylum$pielou)
### Mixed model
glmm_protist_phylum_block_alpha_pielou <- glmer(pielou ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_phylum)
#### Test for Heteroscedasticity
plot(glmm_protist_phylum_block_alpha_pielou)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_phylum_block_alpha_pielou)~as.factor(alpha_lm_protist_phylum$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_phylum_block_alpha_pielou, pielou~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_phylum$pielou~fitted(glmm_protist_phylum_block_alpha_pielou))
### Normality of Residuals
qqnorm(resid(glmm_protist_phylum_block_alpha_pielou))
qqline(resid(glmm_protist_phylum_block_alpha_pielou))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_phylum_block_alpha_pielou)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_phylum_block_alpha_pielou)$header_tanks_block[[1]])
coef(summary(glmm_protist_phylum_block_alpha_pielou))
print(summary(glmm_protist_phylum_block_alpha_pielou), correlation=TRUE)
parameters::p_value(glmm_protist_phylum_block_alpha_pielou)
eta_squared(glmm_protist_phylum_block_alpha_pielou)
## For Observed
### To check the normality of the data
hist(alpha_lm_protist_order$Observed)
qqnorm(alpha_lm_protist_order$Observed)
qqline(alpha_lm_protist_order$Observed)
shapiro.test(alpha_lm_protist_order$Observed)
### Mixed model
glmm_protist_order_block_alpha_Observed <- glmer(Observed ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_order)
#### Test for Heteroscedasticity
plot(glmm_protist_order_block_alpha_Observed)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_order_block_alpha_Observed)~as.factor(alpha_lm_protist_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_order_block_alpha_Observed, Observed~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_order$Observed~fitted(glmm_protist_order_block_alpha_Observed))
### Normality of Residuals
qqnorm(resid(glmm_protist_order_block_alpha_Observed))
qqline(resid(glmm_protist_order_block_alpha_Observed))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_order_block_alpha_Observed)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_order_block_alpha_Observed)$header_tanks_block[[1]])
coef(summary(glmm_protist_order_block_alpha_Observed))
print(summary(glmm_protist_order_block_alpha_Observed), correlation=TRUE)
parameters::p_value(glmm_protist_order_block_alpha_Observed)
eta_squared(glmm_protist_order_block_alpha_Observed)
## For Shannon
### To check the normality of the data
hist(alpha_lm_protist_order$Shannon)
qqnorm(alpha_lm_protist_order$Shannon)
qqline(alpha_lm_protist_order$Shannon)
shapiro.test(alpha_lm_protist_order$Shannon)
### Mixed model
glmm_protist_order_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_order)
#### Test for Heteroscedasticity
plot(glmm_protist_order_block_alpha_Shannon)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_order_block_alpha_Shannon)~as.factor(alpha_lm_protist_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_order_block_alpha_Shannon, Shannon~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_order$Shannon~fitted(glmm_protist_order_block_alpha_Shannon))
### Normality of Residuals
qqnorm(resid(glmm_protist_order_block_alpha_Shannon))
qqline(resid(glmm_protist_order_block_alpha_Shannon))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_order_block_alpha_Shannon)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_order_block_alpha_Shannon)$header_tanks_block[[1]])
coef(summary(glmm_protist_order_block_alpha_Shannon))
print(summary(glmm_protist_order_block_alpha_Shannon), correlation=TRUE)
parameters::p_value(glmm_protist_order_block_alpha_Shannon)
eta_squared(glmm_protist_order_block_alpha_Shannon)
## For Pielou
### To check the normality of the data
hist(alpha_lm_protist_order$pielou)
qqnorm(alpha_lm_protist_order$pielou)
qqline(alpha_lm_protist_order$pielou)
shapiro.test(alpha_lm_protist_order$pielou)
### Mixed model
glmm_protist_order_block_alpha_pielou <- glmer(pielou ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_protist_order)
#### Test for Heteroscedasticity
plot(glmm_protist_order_block_alpha_pielou)
# Do header_tanks_block of week 2 consistently have higher variance in residuals than header_tanks_block of week 3?
plot(resid(glmm_protist_order_block_alpha_pielou)~as.factor(alpha_lm_protist_order$header_tanks_block))
abline(h=0)
# The overall fitness of the model
plot(glmm_protist_order_block_alpha_pielou, pielou~fitted(.), id=0.05, adj=-0.3)
plot(alpha_lm_protist_order$pielou~fitted(glmm_protist_order_block_alpha_pielou))
### Normality of Residuals
qqnorm(resid(glmm_protist_order_block_alpha_pielou))
qqline(resid(glmm_protist_order_block_alpha_pielou))
### Assumptions about the random effects
# Prediction of random efefcts from the model
nlme::ranef(glmm_protist_order_block_alpha_pielou)
# Distribution of the random effects
qqnorm (ranef(glmm_protist_order_block_alpha_pielou)$header_tanks_block[[1]])
coef(summary(glmm_protist_order_block_alpha_pielou))
print(summary(glmm_protist_order_block_alpha_pielou), correlation=TRUE)
parameters::p_value(glmm_protist_order_block_alpha_pielou)
eta_squared(glmm_protist_order_block_alpha_pielou)
print(summary(lmm_algae_phylum_block_alpha_Observed), correlation=TRUE)
print(summary(glmm_algae_phylum_block_alpha_Shannon), correlation=TRUE)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
install.packages("lmerTest")
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
print(summary(lmm_algae_phylum_block_alpha_Observed), correlation=TRUE)
print(summary(glmm_algae_phylum_block_alpha_Shannon), correlation=TRUE)
### Mixed model
glmm_algae_phylum_block_alpha_pielou <- glmer(pielou ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_order_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_order)
## For the algae phylum level
set.seed(1)
## To calculate the Bray-Curtis distance matrix
bray_algae_phylum <- phyloseq::distance(alph_alg_sset_phy_1, method = "bray")
## To make a data frame from the sample_data
perm_algae_phylum_sampledf <- data.frame(sample_data(alph_alg_sset_phy_1))
## To perform the adonis test
adonis2(bray_algae_phylum ~ nutrient*sediment*flow*time, strata = perm_algae_phylum_sampledf$week, data = perm_algae_phylum_sampledf)
## To perform the adonis test
adonis2(bray_algae_phylum ~ nutrient*sediment*flow*time, strata = perm_algae_phylum_sampledf$week, data = perm_algae_phylum_sampledf)
## To perform the adonis test
adonis2(bray_algae_phylum ~ nutrient*sediment*flow*time, strata = perm_algae_phylum_sampledf$week, data = perm_algae_phylum_sampledf)
## To perform the adonis test
adonis2(bray_algae_phylum ~ nutrient*sediment*flow*time, strata = perm_algae_phylum_sampledf$week, data = perm_algae_phylum_sampledf)
## For the algae order level
set.seed(1)
## To calculate the Bray-Curtis distance matrix
bray_algae_order <- phyloseq::distance(alph_alg_sset_ord_1, method = "bray")
## To make a data frame from the sample_data
perm_algae_order_sampledf <- data.frame(sample_data(alph_alg_sset_ord_1))
## To perform the adonis test
adonis2(bray_algae_order ~ nutrient*sediment*flow*time, strata = perm_algae_order_sampledf$week, data = perm_algae_order_sampledf)
## For the protist phylum level
set.seed(1)
## To calculate the Bray-Curtis distance matrix
bray_protist_phylum <- phyloseq::distance(alph_prot_sset_phy_1, method = "bray")
## To make a data frame from the sample_data
perm_protist_phylum_sampledf <- data.frame(sample_data(alph_prot_sset_phy_1))
## To perform the adonis test
adonis2(bray_protist_phylum ~ nutrient*sediment*flow*time, strata = perm_protist_phylum_sampledf$week, data = perm_protist_phylum_sampledf)
## For the protist order level
set.seed(1)
## To calculate the Bray-Curtis distance matrix
bray_protist_order <- phyloseq::distance(alph_prot_sset_ord_1, method = "bray")
## To make a data frame from the sample_data
perm_protist_order_sampledf <- data.frame(sample_data(alph_prot_sset_ord_1))
## To perform the adonis test
adonis2(bray_protist_order ~ nutrient*sediment*flow*time, strata = perm_protist_order_sampledf$week, data = perm_protist_order_sampledf)
## For the algae phylum level
dispersion_algae_phylum <- vegan::betadisper(bray_algae_phylum, phyloseq::sample_data(alph_alg_sset_phy_1)$treatment)
dispersion_algae_phylum
plot(dispersion_algae_phylum, main = "For the algae phylum level: Ordination Centroids and Dispersion Labeled for Different Treatments: Aitchison Distance", sub = "")
boxplot(dispersion_algae_phylum, main = "", xlab = "")
## Permutation test for homogeneity of multivariate dispersions
permutest(dispersion_algae_phylum)
## For the algae order level
dispersion_algae_order <- vegan::betadisper(bray_algae_order, phyloseq::sample_data(alph_alg_sset_ord_1)$treatment)
dispersion_algae_order
plot(dispersion_algae_order, main = "For the algae order level: Ordination Centroids and Dispersion Labeled for Different Treatments: Aitchison Distance", sub = "")
boxplot(dispersion_algae_order, main = "", xlab = "")
## Permutation test for homogeneity of multivariate dispersions
permutest(dispersion_algae_order)
## For the protist phylum level
dispersion_protist_phylum <- vegan::betadisper(bray_protist_phylum, phyloseq::sample_data(alph_prot_sset_phy_1)$treatment)
dispersion_protist_phylum
plot(dispersion_protist_phylum, main = "For the protist phylum level: Ordination Centroids and Dispersion Labeled for Different Treatments: Aitchison Distance", sub = "")
boxplot(dispersion_protist_phylum, main = "", xlab = "")
## Permutation test for homogeneity of multivariate dispersions
permutest(dispersion_protist_phylum)
## For the protist order level
dispersion_protist_order <- vegan::betadisper(bray_protist_order, phyloseq::sample_data(alph_prot_sset_ord_1)$treatment)
dispersion_protist_order
plot(dispersion_protist_order, main = "For the protist order level: Ordination Centroids and Dispersion Labeled for Different Treatments: Aitchison Distance", sub = "")
boxplot(dispersion_protist_order, main = "", xlab = "")
## Permutation test for homogeneity of multivariate dispersions
permutest(dispersion_protist_order)
pcoa_dist = "bray"
pcoa_ord_meths = c("PCoA")
## For the algae phylum level
ap_plist = llply(as.list(pcoa_ord_meths), function(i, physeq, pcoa_dist){
ordi = ordinate(physeq, method=i, distance=pcoa_dist)
plot_ordination(physeq, ordi, "samples", color="treatment")
}, alph_alg_sset_phy_1, pcoa_dist)
names(ap_plist) <- pcoa_ord_meths
ap_pdataframe = ldply(ap_plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("PCoA1", "PCoA2")
return(cbind(df, x$data))
})
names(ap_pdataframe)[1] = "method"
ap_p = ggplot(ap_pdataframe, aes(PCoA1, PCoA2, color=treatment, shape=as.factor(week), fill=treatment))+
geom_point(size=4) + geom_polygon()+
facet_wrap(~method, scales="free")+
scale_fill_brewer(type="qual", palette="Set1")+
scale_colour_brewer(type="qual", palette="Set1")
ap_p
## For the algae order level
ao_plist = llply(as.list(pcoa_ord_meths), function(i, physeq, pcoa_dist){
ordi = ordinate(physeq, method=i, distance=pcoa_dist)
plot_ordination(physeq, ordi, "samples", color="treatment")
}, alph_alg_sset_ord_1, pcoa_dist)
names(ao_plist) <- pcoa_ord_meths
ao_pdataframe = ldply(ao_plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("PCoA1", "PCoA2")
return(cbind(df, x$data))
})
names(ao_pdataframe)[1] = "method"
ao_p = ggplot(ao_pdataframe, aes(PCoA1, PCoA2, color=treatment, shape=as.factor(week), fill=treatment))+
geom_point(size=4) + geom_polygon()+
facet_wrap(~method, scales="free")+
scale_fill_brewer(type="qual", palette="Set1")+
scale_colour_brewer(type="qual", palette="Set1")
ao_p
pp_p
po_p
plot(dispersion_protist_order, main = "For the protist order level: Ordination Centroids and Dispersion Labeled for Different Treatments: Aitchison Distance", sub = "")
summary.aov(manova_abundant_algae_phylum)
eta_squared(aov(manova_abundant_algae_phylum))
coef(manova_abundant_algae_phylum)
coef(manova_abundant_algae_order)
summary.aov(manova_abundant_algae_order)
eta_squared(aov(manova_abundant_algae_order))
coef(manova_abundant_protist_phylum)
summary.aov(manova_abundant_protist_phylum)
eta_squared(aov(manova_abundant_protist_phylum))
coef(manova_abundant_protist_order)
summary.aov(manova_abundant_protist_order)
eta_squared(aov(manova_abundant_protist_order))
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- lmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- lmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), data = alpha_lm_algae_phylum)
summary(glmm_algae_phylum_block_alpha_Shannon)
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
overdisp_fun <- function(model) {
## number of variance parameters in an n-by-n variance-covariance matrix
vpars <- function(m) {
nrow(m) * (nrow(m) + 1)/2
}
# The next two lines calculate the residual degrees of freedom
model.df <- sum(sapply(VarCorr(model), vpars)) + length(fixef(model))
rdf <- nrow(model.frame(model)) - model.df
# extracts the Pearson residuals
rp <- residuals(model, type = "pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
# Generates a p-value. If less than 0.05, the data are overdispersed.
pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
overdisp_fun(lmm_algae_phylum_block_alpha_Observed)
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
#################################
overdisp_fun <- function(model) {
## number of variance parameters in an n-by-n variance-covariance matrix
vpars <- function(m) {
nrow(m) * (nrow(m) + 1)/2
}
# The next two lines calculate the residual degrees of freedom
model.df <- sum(sapply(VarCorr(model), vpars)) + length(fixef(model))
rdf <- nrow(model.frame(model)) - model.df
# extracts the Pearson residuals
rp <- residuals(model, type = "pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
# Generates a p-value. If less than 0.05, the data are overdispersed.
pval <- pchisq(Pearson.chisq, df = rdf, lower.tail = FALSE)
c(chisq = Pearson.chisq, ratio = prat, rdf = rdf, p = pval)
}
overdisp_fun(lmm_algae_phylum_block_alpha_Observed)
overdisp_fun(glmm_algae_phylum_block_alpha_Shannon)
overdisp_fun(glmm_algae_phylum_block_alpha_pielou)
overdisp_fun(lmm_algae_order_block_alpha_Observed)
overdisp_fun(glmm_algae_order_block_alpha_Shannon)
overdisp_fun(glmm_algae_order_block_alpha_pielou)
overdisp_fun(glmm_protist_phylum_block_alpha_Observed)
overdisp_fun(glmm_protist_phylum_block_alpha_Shannon)
overdisp_fun(glmm_protist_phylum_block_alpha_pielou)
overdisp_fun(glmm_protist_order_block_alpha_Observed)
overdisp_fun(glmm_protist_order_block_alpha_Shannon)
overdisp_fun(glmm_protist_order_block_alpha_pielou)
print(summary(glmm_protist_order_block_alpha_pielou), correlation=TRUE)
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
overdisp_fun(lmm_algae_phylum_block_alpha_Observed)
overdisp_fun(glmm_algae_phylum_block_alpha_Shannon)
overdisp_fun(glmm_algae_phylum_block_alpha_pielou)
overdisp_fun(lmm_algae_order_block_alpha_Observed)
overdisp_fun(glmm_algae_order_block_alpha_Shannon)
overdisp_fun(glmm_algae_order_block_alpha_pielou)
overdisp_fun(glmm_protist_phylum_block_alpha_Observed)
overdisp_fun(glmm_protist_phylum_block_alpha_Shannon)
overdisp_fun(glmm_protist_phylum_block_alpha_pielou)
overdisp_fun(glmm_protist_order_block_alpha_Observed)
overdisp_fun(glmm_protist_order_block_alpha_Shannon)
overdisp_fun(glmm_protist_order_block_alpha_pielou)
print(summary(glmm_algae_phylum_block_alpha_Shannon), correlation=TRUE)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = poisson	(link = "identity"), data = alpha_lm_algae_phylum)
coef(summary(glmm_algae_phylum_block_alpha_Shannon))
overdisp_fun(glmm_algae_phylum_block_alpha_Shannon)
print(summary(glmm_algae_phylum_block_alpha_Shannon), correlation=TRUE)
parameters::p_value(glmm_algae_phylum_block_alpha_Shannon)
eta_squared(glmm_algae_phylum_block_alpha_Shannon)
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), REML=TRUE, family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), REML=FALSE, family = gaussian	(link = "identity"), data = alpha_lm_algae_phylum)
### Mixed model
glmm_algae_phylum_block_alpha_Shannon <- glmer(Shannon ~ nutrient*sediment*flow*time + (1|header_tanks_block), family = binomial, data = alpha_lm_algae_phylum)
plot_model(lmm_algae_phylum_block_alpha_Observed,type = "pred",terms = c("nutrient","Observed")
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest)
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest, DHARMa)
plot(simulateResiduals(lmm_algae_phylum_block_alpha_Observed))
install.packages("car")
## To load the installed packages with the pacman package
pacman::p_load(pacman, dplyr, readxl, ggplot2, phyloseq, microbiome, reshape2, ape, gridExtra, plotly, vegan, dendextend, tidyr, rms, effectsize, lme4, picante, cowplot, here, lsr, MASS, rcompanion, ggiraphExtra, optimx, mvabund, gllvm, radiant.data, tidyverse, MuMIn, corrplot, gclus, coefplot, jtools, ggstance, interactions, blmeco, tseries, plyr, lmerTest, DHARMa, car)
Anova(lmm_algae_phylum_block_alpha_Observed)
plot(simulateResiduals(glmm_algae_phylum_block_alpha_Shannon))
Anova(glmm_algae_phylum_block_alpha_Shannon)
plot(simulateResiduals(glmm_algae_phylum_block_alpha_pielou))
Anova(glmm_algae_phylum_block_alpha_pielou)
plot(simulateResiduals(lmm_algae_order_block_alpha_Observed))
Anova(lmm_algae_order_block_alpha_Observed)
plot(simulateResiduals(glmm_algae_order_block_alpha_Shannon))
Anova(glmm_algae_order_block_alpha_Shannon)
plot(simulateResiduals(glmm_algae_order_block_alpha_pielou))
Anova(glmm_algae_order_block_alpha_pielou)
plot(simulateResiduals(glmm_protist_phylum_block_alpha_Observed))
Anova(glmm_protist_phylum_block_alpha_Observed)
plot(simulateResiduals(glmm_protist_phylum_block_alpha_Shannon))
Anova(glmm_protist_phylum_block_alpha_Shannon)
plot(simulateResiduals(glmm_protist_phylum_block_alpha_pielou))
Anova(glmm_protist_phylum_block_alpha_pielou)
plot(simulateResiduals(glmm_protist_order_block_alpha_Observed))
Anova(glmm_protist_order_block_alpha_Observed)
plot(simulateResiduals(glmm_protist_order_block_alpha_Shannon))
Anova(glmm_protist_order_block_alpha_Shannon)
plot(simulateResiduals(glmm_protist_order_block_alpha_pielou))
Anova(glmm_protist_order_block_alpha_pielou)
